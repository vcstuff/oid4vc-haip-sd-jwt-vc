



OpenID Connect                                                 K. Yasuda
                                                               Microsoft
                                                          T. Lodderstedt
                                                                 yes.com
                                                             5 June 2023


    OpenID4VC High Assurance Interoperability Profile with SD-JWT VC
                   draft-oid4vc-haip-sd-jwt-vc-latest

Abstract

   This document defines a profile of OpenID for Verifiable Credentials
   in combination with the credential format SD-JWT VC.  The aim is to
   select features and to define a set of requirements for the existing
   specifications to enable interoperability among Issuers, Wallets and
   Verifiers of Credentials where a high level of security and privacy
   is required.  The profiled specifications include OpenID for
   Verifiable Credential Issuance [OIDF.OID4VCI], OpenID for Verifiable
   Presentations [OIDF.OID4VP], Self-Issued OpenID Provider v2
   [OIDF.SIOPv2], and SD-JWT VC [I-D.terbu-sd-jwt-vc].

Table of Contents

   1.  Introduction
     1.1.  Audience Target audience/Usage
   2.  Terminology
   3.  Scope
     3.1.  Out of Scope
     3.2.  Scenarios/Business Requirements
     3.3.  Standards Requirements
   4.  OpenID for Verifiable Credential Issuance
     4.1.  Credential Offer
     4.2.  Authorization Endpoint
     4.3.  Token Endpoint
       4.3.1.  Wallet Attestation Schema
     4.4.  Credential Endpoint
     4.5.  Server Metadata
   5.  OpenID for Verifiable Presentations
   6.  Self-Issued OP v2
   7.  SD-JWT VCs
     7.1.  Issuer identification and key resolution to validate an
           issued Credential
       7.1.1.  Cryptographic Holder Binding between VC and VP
   8.  Crypto Suites
   9.  Implementations Considerations
     9.1.  Validity Period of the Signature and the Claim Values
   10. Normative References
   11. Informative References
   Appendix A.  Combined Issuance of SD-JWT VC and mdocs
   Appendix B.  JSON Schema for the supported Presentation Definition
           properties
   Authors' Addresses

1.  Introduction

   This document defines a set of requirements for the existing
   specifications to enable interoperability among Issuers, Wallets and
   Verifiers of Credentials where a high level of security and privacy
   is required.  This document is an interoperability profile that can
   be used by implementations in various contexts, be it a certain
   industry or a certain regulatory environment.

   This document is not a specification, but a profile.  It refers to
   the specifications required for implementations to interoperate among
   each other and for the optionalities mentioned in the referenced
   specifications, defines the set of features to be mandatory to
   implement.

   The profile uses OpenID for Verifiable Credential Issuance
   [OIDF.OID4VCI] and OpenID for Verifiable Presentations [OIDF.OID4VP]
   as the base protocols for issuance and presentation of Credentials,
   respectively.  The credential format used is SD-JWT VC as specified
   in [I-D.terbu-sd-jwt-vc].  Additionally, considerations are given on
   how deployments can perform a combined issuance of credentials in
   both SD-JWT VC and ISO mdoc [ISO.18013-5] formats.

   A full list of the open standards used in this profile can be found
   in Overview of the Open Standards Requirements (reference).

1.1.  Audience Target audience/Usage

   The audience of the document is implementers that require a high
   level of security and privacy for their solutions.  A non-exhaustive
   list of the interested parties includes eIDAS 2.0, California
   Department of Motor Vehicles, Open Wallet Foundation (OWF), IDunion,
   GAIN, and the Trusted Web project of the Japanese government, but is
   expected to grow to include other jurisdictions and private sector
   companies.

2.  Terminology

   This specification uses the terms "Holder", "Issuer", "Verifier", and
   "Verifiable Credential" as defined in [I-D.terbu-sd-jwt-vc].

3.  Scope

   The following aspects are in scope of this interoperability profile:

   *  Protocol for issuance of the Verifiable Credentials (can be both
      remote and in-person) (OID4VCI)

   *  Protocol for online presentation of Verifiable Credentials (can be
      both remote and in-person) (OID4VP)

   *  Protocol for User Authentication by the Wallet at a Verifier (SIOP
      v2)

   *  Wallet Attestation (during Credential issuance)

   *  Credential Format (SD-JWT VC)

   *  Status Management of the Credentials, including revocation

   *  Cryptographic Holder Binding

   *  Issuer key resolution

   *  Issuer identification (as prerequisite for trust management)

   *  Crypto Suites

   Assumptions made are the following:

   *  The issuers and verifiers cannot pre-discover wallet's capability

   *  The issuer is talking to the wallet supporting the features
      defined in this profile (via wallet invocation mechanism)

   *  There are mechanisms in place for the verifiers and issuers to
      discover each other's capability

3.1.  Out of Scope

   The following items are out of scope for the current version of this
   document, but might be added in future versions:

   *  Trust Management, i.e. authorization of an issuer to issue certain
      types of credentials, authorization of the Wallet to be issued
      certain types of credentials, authorization of the Verifier to
      receive certain types of credentials.

   *  Protocol for presentation of Verifiable Credentials for offline
      use-cases, e.g. over BLE.

3.2.  Scenarios/Business Requirements

   *  Combined Issuance of SD-JWT VC and mdoc

   *  Both issuer-initiated and wallet-initiated issuance

   *  eIDAS PID and (Q)EAA as defined in eIDAS ARF 1.0

3.3.  Standards Requirements

   Unless explicitly stated, all normative requirements apply to all
   participating entities: Issuers, Wallets and Verifiers.

       +==============================+========+========+==========+
       | (as defined in this profile) | Issuer | Wallet | Verifier |
       +==============================+========+========+==========+
       | OID4VP                       | N/A    | MUST   | MUST     |
       +------------------------------+--------+--------+----------+
       | OID4VCI                      | MUST   | MUST   | N/A      |
       +------------------------------+--------+--------+----------+
       | SIOPv2                       | N/A    | MUST   | SHOULD   |
       +------------------------------+--------+--------+----------+
       | SD-JWT VC                    | MUST   | MUST   | MUST     |
       +------------------------------+--------+--------+----------+

                                  Table 1

4.  OpenID for Verifiable Credential Issuance

   Implementations of this profile:

   *  MUST support both pre-auth code flow and authorization code flow.

   *  MUST support SD-JWT VC profile as defined in OID4VCI
      specification.

   *  MUST support sender-constrained Tokens using a mechanism as
      defined in [I-D.ietf-oauth-dpop].

   *  MUST support [RFC7636] with S256 as the code challenge method.

   Both Wallet initiated and Issuer initiated issuance is supported.

4.1.  Credential Offer

   *  The Grant Types authorization_code and
      urn:ietf:params:oauth:grant-type:pre-authorized_code MUST be
      supported as defined in Section 4.1.1 in [OIDF.OID4VCI]

   *  For Grant Type authorization_code, the Issuer MUST include a scope
      value in order to allow the Wallet to identify the desired
      credential type.  The wallet MUST use that value in the scope
      Authorization parameter.  For Grant Type
      urn:ietf:params:oauth:grant-type:pre-authorized_code, the pre-
      authorized code is used by the issuer to identify the credential
      type(s). (pending OID4VCI PR#519)

   *  As a way to invoke the Wallet, at least a custom URL scheme
      haip:// MUST be supported.  Implementations MAY support other ways
      to invoke the wallets as agreed by trust frameworks/ecosystems/
      jurisdictions, not limited to using other custom URL schemes.

   Note: The Authorization Code flow does not require a Credential Offer
   from the Issuer to the Wallet.  However, it is included in the
   feature set of the Credential Offer because it might be easier to
   implement with existing libraries and on top of existing
   implementations than the pre-authorized code Grant Type.

   Both sending Credential Offer same-device and cross-device is
   supported.

4.2.  Authorization Endpoint

   *  MUST use Pushed Authorization Requests (PAR) [RFC9126] to send the
      Authorization Request.

   *  Wallets MUST authenticate itself at the PAR endpoint using the
      same rules as defined in Section 4.3 for client authentication at
      the token endpoint.

   *  MUST use scope parameter to communicate credential type(s) to be
      issued.  The scope value MUST map to a specific Credential type.
      (pending OID4VCI PR#520)

   *  The client_id value in the PAR request MUST be a string that the
      Wallet has used as the sub value in the client attestation JWT.

4.3.  Token Endpoint

   *  The Wallets MUST perform client authentication as defined in [!I-
      D.ietf-looker-key-attestation-client-authentication].

   *  Refresh tokens MUST be supported for credential refresh.

   *  Wallets MUST support deferred authorization by being able to
      process the Token error response parameters authorization_pending
      and slow_down, and the credential offer parameter interval.

   *  The wallet attestation JWT scheme is defined in Section 4.3.1.

   Note: It is RECOMMENDED to use ephemeral client attestation JWTs for
   client authentication in order to prevent linkability across
   Credential Issuers.

   Note: Issuers should be mindful of how long the usage of the refresh
   token is allowed to refresh a credential, as opposed to starting the
   issuance flow from the beginning.  For example, if the User is trying
   to refresh a credential more than a year after its original issuance,
   the usage of the refresh tokens is NOT RECOMMENDED.

4.3.1.  Wallet Attestation Schema

   [Section 3.1 of wallet attestation draft would define the basics, and
   this profile will define the details.]

4.4.  Credential Endpoint

   *  The JWT proof type MUST be supported.

4.5.  Server Metadata

   *  The Credential Issuer MUST publish a mapping of every Credential
      Type it supports to a scope value.

5.  OpenID for Verifiable Presentations

   *  As a way to invoke the Wallet, at least a custom URL scheme
      haip:// MUST be supported.  Implementations MAY support other ways
      to invoke the wallets as agreed by trust frameworks/ecosystems/
      jurisdictions, not limited to using other custom URL schemes.

   *  Response type MUST be vp_token.

   *  Response mode MUST be direct_post with redirect_uri as defined in
      Section 6.2 of [OIDF.OID4VP].

   *  Authorization Request MUST be sent using the request_uri parameter
      as defined in JWT-Secured Authorization Request (JAR) [RFC9101].

   *  client_id_scheme parameter MUST be present in the Authorization
      Request.

   *  client_id_scheme value MUST be either x509_san_dns or
      verifier_attestation.  Wallet MUST support both.  Verifier MUST
      support at least one. (pending OID4VCI PR #524 for
      verifier_attestation)

   *  Presentation Definition JSON object MUST be sent using a
      presentation_definition parameter.

   *  The following features from the DIF Presentation Exchange v2.0.0
      MUST be supported.  A JSON schema for the supported features is in
      Appendix B:

      -  In the presentation_definition object, id, input_descriptors
         and submission_requirements properties MUST be supported.

      -  In the input-descriptors object, id, name, purpose, group,
         format, and constraints properties MUST be supported.  In the
         constraints object, limit_disclosure, and fields properties
         MUST be supported.  In the fields object, path and filter
         properties MUST be supported.  A path MUST contain exactly one
         entry with a static path to a certain claim.  A filter MUST
         only contain type elements of value string and const elements.

      -  In the submission_requirements object, name, rule (pickonly),
         count, from properties MUST be supported.

6.  Self-Issued OP v2

   To authenticate the user, subject identifier in a Self-Issued ID
   Token MUST be used as defined in [OIDF.SIOPv2].

   *  As a way to invoke the Wallet, at least a custom URL scheme
      haip:// MUST be supported.  Implementations MAY support other ways
      to invoke the wallets as agreed by trust frameworks/ecosystems/
      jurisdictions, not limited to using other custom URL schemes.

   *  subject_syntax_types_supported value MUST be
      urn:ietf:params:oauth:jwk-thumbprint

7.  SD-JWT VCs

   As credential format, SD-JWT VCs as defined in [I-D.terbu-sd-jwt-vc]
   MUST be used.

   In addition, this profile defines the following additional
   requirements.

   *  Both Compact serialization and JSON serialization MUST be
      supported as defined in [I-D.ietf-oauth-selective-disclosure-jwt].

   *  The following JWT Claims MUST be supported Content (differentiate
      issuance & presentation)

    +========+================================+=======================+
    | Claim  | SD-JWT as issued by the Issuer | Normative Definition  |
    +========+================================+=======================+
    | iss    | MUST                           | [RFC7519],            |
    |        |                                | Section 4.1.1         |
    +--------+--------------------------------+-----------------------+
    | iat    | MUST                           | [RFC7519],            |
    |        |                                | Section 4.1.6         |
    +--------+--------------------------------+-----------------------+
    | exp    | SHOULD (at the discretion of   | [RFC7519],            |
    |        | the issuer)                    | Section 4.1.4         |
    +--------+--------------------------------+-----------------------+
    | cnf    | MUST                           | [RFC7800]             |
    +--------+--------------------------------+-----------------------+
    | type   | MUST                           | [I-D.terbu-sd-jwt-vc] |
    +--------+--------------------------------+-----------------------+
    | status | SHOULD (at the discretion of   | WIP                   |
    |        | the issuer)                    |                       |
    +--------+--------------------------------+-----------------------+

                                  Table 2

   *  The Issuer MUST NOT make any of the JWT Claims in the table above
      to be selectively disclosable, so that they are always present in
      the SD-JWT-VC presented by the Holder.

   *  It is at the discretion of the Issuer whether to use exp claim
      and/or a status claim to express the validity period of an SD-JWT-
      VC.  The wallet and the verifier MUST support both mechanisms.

   *  The iss claim MUST be an HTTPS URL.  The iss value is used to
      obtain Issuer's signing key as defined in Section 7.1.

   *  The type JWT claim as defined in [I-D.terbu-sd-jwt-vc].

   *  The cnf claim [RFC7800] MUST conform to the definition given in
      [I-D.terbu-sd-jwt-vc].  Implementations conforming to this profile
      MUST include the JSON Web Key [RFC7517] in the jwk sub claim.

   Note: Currently this profile only supports presentation of
   credentials with cryptographic Holder Binding: the holder's signature
   is required to proof the credential is presented by the holder it was
   issued to.  This profile might support claim-based and biometrics-
   based holder binding once OpenID for Verifiable Credentials adds
   support for other forms of Holder Binding.  See
   https://bitbucket.org/openid/connect/issues/1537/presenting-vc-
   without-a-vp-using-openid4vp
   (https://bitbucket.org/openid/connect/issues/1537/presenting-vc-
   without-a-vp-using-openid4vp)

   Note: Re-using the same Credential across Verifiers, or re-using the
   same JWK value across multiple Credentials gives colluding Verifiers
   a mechanism to correlate the User.  There are currently two known
   ways to address this with SD-JWT VCs.  First is to issue multiple
   instances of the same credentials with different JWK values, so that
   if each instance of the credential is used at only one Verifier, it
   can be reused multiple times.  Another is to use each credential only
   once (ephemeral credentials).  It is RECOMMENDED to adopt one of
   these mechanisms.

   Note: If there is a requirement to communicate information about the
   verification status and identity assurance data of the claims about
   the subject, the syntax defined by [OIDF.ekyc-ida] SHOULD be used.
   It is up to each jurisdiction and ecosystem, whether to require it to
   the implementers of this profile.

   Note: If there is a requirement to provide the Subject’s identifier
   assigned and maintained by the Issuer, sub claim MAY be used.  There
   is no requirement for a binding to exist between sub and cnf claims.
   See section X in [I-D.terbu-sd-jwt-vc] for implementation
   considerations.

   Note: In some credential types, it is not desirable to include an
   expiration date (eg: diploma attestation).  Therefore, this profile
   leaves its inclusion to the Issuer, or the body defining the
   respective credential type.

7.1.  Issuer identification and key resolution to validate an issued
      Credential

   This profile supports two ways to represent and resolves the key
   required to validate the issuer signature of a SD-JWT VC, web PKI-
   based key resolution and x.509 certificates.

   *  Web-based key resolution: The key used to validate the Issuer's
      signature on the SD-JWT VC MUST be obtained from the SD-JWT VC
      issuer's metadata as defined in Section 5 of
      [I-D.terbu-sd-jwt-vc].  The JOSE header kid MUST be used to
      identify the respective key.

   *  x.509 certificates: the SD-JWT VC contains the issuer's
      certificate along with a trust chain in the x5c JOSE header.  In
      this case, the iss value MUST be an URL with a FQDN matching a
      dNSName Subject Alternative Name (SAN) [RFC5280] entry in the leaf
      certificate.

   Note: The issuer MAY decide to support both options.  In which case,
   it is at the discretion of the Wallet and the Verifier which key to
   use for the issuer signature validation.

7.1.1.  Cryptographic Holder Binding between VC and VP

   *  For Cryptographic Holder Binding, an HB-JWT as defined in
      [I-D.terbu-sd-jwt-vc] MUST always be present when presenting a SD-
      JWT VC.

8.  Crypto Suites

   Issuers, holders and verifiers MUST support P-256 (secp256r1) as a
   key type with ES256 JWT algorithm for signing and signature
   validation whenever this profiles requires to do so:

   *  SD-JWT-VC

   *  Wallet Instance Attestation

   *  DPoP

   *  HB JWT

   *  Authorization request during presentation

   SHA256 MUST be supported by all the entities as the hash algorithm to
   generate and validate the digests in the SD-JWT VC.

   Note: When using this profile with other cryptosuites, it is
   recommended to be explicit about which entity is required to support
   which curve for signing and/or signature validation

9.  Implementations Considerations

9.1.  Validity Period of the Signature and the Claim Values

   iat and exp JWT claims express both the validity period of both the
   signature and the claims about the subject, unless there is a
   separate claim used to express the validity of the claims.

10.  Normative References

   [I-D.ietf-oauth-dpop]
              Fett, D., Campbell, B., Bradley, J., Lodderstedt, T.,
              Jones, M. B., and D. Waite, "OAuth 2.0 Demonstrating
              Proof-of-Possession at the Application Layer (DPoP)", Work
              in Progress, Internet-Draft, draft-ietf-oauth-dpop-16, 13
              April 2023, <https://datatracker.ietf.org/doc/html/draft-
              ietf-oauth-dpop-16>.

   [I-D.ietf-oauth-selective-disclosure-jwt]
              Fett, D., Yasuda, K., and B. Campbell, "Selective
              Disclosure for JWTs (SD-JWT)", Work in Progress, Internet-
              Draft, draft-ietf-oauth-selective-disclosure-jwt-04, 11
              April 2023, <https://datatracker.ietf.org/doc/html/draft-
              ietf-oauth-selective-disclosure-jwt-04>.

   [I-D.terbu-sd-jwt-vc]
              Terbu, O. and D. Fett, "SD-JWT-based Verifiable
              Credentials with JSON payloads (SD-JWT VC)", Work in
              Progress, Internet-Draft, draft-terbu-sd-jwt-vc-02, 26 May
              2023, <https://datatracker.ietf.org/doc/html/draft-terbu-
              sd-jwt-vc-02>.

   [OIDF.OID4VCI]
              Lodderstedt, T., Yasuda, K., and T. Looker, "OpenID for
              Verifiable Credential Issuance", 20 June 2022,
              <https://openid.net/specs/openid-4-verifiable-credential-
              issuance-1_0.html>.

   [OIDF.OID4VP]
              Terbu, O., Lodderstedt, T., Yasuda, K., Lemmon, A., and T.
              Looker, "OpenID for Verifiable Presentations", 20 June
              2022, <https://openid.net/specs/openid-4-verifiable-
              presentations-1_0.html>.

   [OIDF.SIOPv2]
              Microsoft, Jones, M. B., and T. Lodderstedt, "Self-Issued
              OpenID Provider V2", 18 December 2021,
              <https://openid.net/specs/openid-connect-self-issued-
              v2-1_0.html>.

   [OIDF.ekyc-ida]
              yes, Fett, D., Haine, M., Pulido, A., Lehmann, K., and K.
              Koiwai, "OpenID Connect for Identity Assurance 1.0", 19
              August 2022, <https://openid.net/specs/openid-connect-4-
              identity-assurance-1_0-ID4.html>.

   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
              <https://www.rfc-editor.org/info/rfc5280>.

   [RFC7517]  Jones, M., "JSON Web Key (JWK)", RFC 7517,
              DOI 10.17487/RFC7517, May 2015,
              <https://www.rfc-editor.org/info/rfc7517>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <https://www.rfc-editor.org/info/rfc7519>.

   [RFC7636]  Sakimura, N., Ed., Bradley, J., and N. Agarwal, "Proof Key
              for Code Exchange by OAuth Public Clients", RFC 7636,
              DOI 10.17487/RFC7636, September 2015,
              <https://www.rfc-editor.org/info/rfc7636>.

   [RFC7800]  Jones, M., Bradley, J., and H. Tschofenig, "Proof-of-
              Possession Key Semantics for JSON Web Tokens (JWTs)",
              RFC 7800, DOI 10.17487/RFC7800, April 2016,
              <https://www.rfc-editor.org/info/rfc7800>.

   [RFC9101]  Sakimura, N., Bradley, J., and M. Jones, "The OAuth 2.0
              Authorization Framework: JWT-Secured Authorization Request
              (JAR)", RFC 9101, DOI 10.17487/RFC9101, August 2021,
              <https://www.rfc-editor.org/info/rfc9101>.

   [RFC9126]  Lodderstedt, T., Campbell, B., Sakimura, N., Tonge, D.,
              and F. Skokan, "OAuth 2.0 Pushed Authorization Requests",
              RFC 9126, DOI 10.17487/RFC9126, September 2021,
              <https://www.rfc-editor.org/info/rfc9126>.

11.  Informative References

   [ISO.18013-5]
              ISO/IEC JTC 1/SC 17 Cards and security devices for
              personal identification, "ISO/IEC 18013-5:2021 Personal
              identification — ISO-compliant driving license — Part 5:
              Mobile driving license (mDL) application", 2021,
              <https://www.iso.org/standard/69084.html>.

Appendix A.  Combined Issuance of SD-JWT VC and mdocs

   *  If combined issuance is required, the Batch Credential Endpoint
      MUST be supported.

Appendix B.  JSON Schema for the supported Presentation Definition
             properties

   {
       "$schema": "http://json-schema.org/draft-07/schema#",
       "title": "Presentation Definition for a High Assurance Profile",
       "type": "object",
       "properties": {
         "presentation_definition": {
           "$ref": "#/definitions/presentation_definition"
         }
       },
       "definitions": {
         "presentation_definition": {
           "type": "object",
           "properties": {
             "id": {
               "type": "string"
             },
             "input_descriptors": {
               "type": "array",
               "items": {
                 "$ref": "#/definitions/input_descriptor"
               }
             },
             "submission_requirements": {
               "type": "array",
               "items": {
                 "$ref": "#/definitions/submission_requirement"
               }
             }
           },
           "required": [
             "id",
             "input_descriptors"
           ],
           "additionalProperties": false
         },
         "input_descriptor": {
           "type": "object",
           "additionalProperties": false,
           "properties": {
             "id": {
               "type": "string"
             },
             "name": {
               "type": "string"
             },
             "purpose": {
               "type": "string"
             },
             "format": {
               "$ref": "http://identity.foundation/claim-format-registry/schemas/presentation-definition-claim-format-designations.json"
             },
             "group": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             },
             "constraints": {
               "type": "object",
               "additionalProperties": false,
               "properties": {
                 "limit_disclosure": {
                   "type": "string",
                   "enum": [
                     "required",
                     "preferred"
                   ]
                 },
                 "fields": {
                   "type": "array",
                   "items": {
                     "path": {
                       "type": "array",
                       "items": {
                         "type": "string"
                       }
                     },
                     "filter": {
                       "$ref": "http://json-schema.org/draft-07/schema#"
                     }
                   }
                 }
               }
             }
           },
           "required": [
             "id",
             "constraints"
           ]
         },
         "submission_requirement": {
           "type": "object",
           "oneOf": [
             {
               "properties": {
                 "name": {
                   "type": "string"
                 },
                 "rule": {
                   "type": "string",
                   "enum": [
                     "pick"
                   ]
                 },
                 "count": {
                   "type": "integer",
                   "minimum": 1
                 },
                 "from": {
                   "type": "string"
                 }
               },
               "required": [
                 "rule",
                 "from"
               ],
               "additionalProperties": false
             }
           ]
         }
       }
     }

Authors' Addresses

   Kristina Yasuda
   Microsoft
   Email: kristina.yasuda@microsoft.com


   Torsten Lodderstedt
   yes.com
   Email: torsten@lodderstedt.net
